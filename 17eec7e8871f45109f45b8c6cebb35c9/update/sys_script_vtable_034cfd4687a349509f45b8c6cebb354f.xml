<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_vtable">
    <sys_script_vtable action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>true</advanced>
        <cache_isolation_level>USER</cache_isolation_level>
        <cache_strategy>CACHE_BY_QUERY</cache_strategy>
        <cache_ttl>300</cache_ttl>
        <name>DefLegosetInfoVers2</name>
        <script><![CDATA[(function executeQuery(v_table, v_query) {
    // Main API:
    //    v_table.addRow({ ... }) - adds a row to the result set
    
    // There are also query helper methods
    //    v_query.getEncodedQuery() - returns encoded querystring
    //    v_query.getCondition(field) - returns encoded querystring for the given field (includes field name, operator, and value)
    //    v_query.getParameter(field) - returns parameter for the given field (only includes value for equality conditions)
    //    v_query.isGet() - returns whether the query is a single get by sys_id
    //    v_query.getSysId() - returns parameter for sys_id field
    //    v_query.isTextSearch() - returns whether the query contains a text query parameter
    //    v_query.getTextSearch() - returns text search query parameter (internal field name 123TEXTQUERY321)
    //    v_query.getFirstRowWanted() - returns the first row to include
    //    v_query.getLastRowWanted() - returns the last row to include
	
    // Note: You must define sys_id for each row so that forms and lists for this table work properly
	gs.addInfoMessage(v_query.getEncodedQuery());
    try {
		var r = new sn_ws.RESTMessageV2('x_356576_rebrick2.RebrickableInfo', 'GetLegoSets');
		//r.setQueryParameter('theme_id','130');
		//r.setQueryParameter('min_year','1981');
		//r.setQueryParameter('max_year','1983');
		var response = r.execute();
		var responseBody = response.getBody();
		var httpStatus = response.getStatusCode();
		if (response.haveError()) {
				v_query.setLastErrorMessage(response.getErrorMessage());
				return;
		}//gs.addInfoMessage(responseBody);
		var responseObj = JSON.parse(responseBody); //gs.addInfoMessage(responseObj);
		var resultArr = responseObj.results; // all the records are contained in an array 'result' //gs.addInfoMessage(resultArr);
		for (var i=0; i< resultArr.length; i++){
		//build the row
			var row = {};
			var id = resultArr[i].set_num.replace("-","x");
			row.last_modified_dt = resultArr[i].last_modified_dt;
			row.name = resultArr[i].name;
			row.num_parts = resultArr[i].num_parts;
			row.set_num = resultArr[i].set_num;
			row.sys_id = id;
			row.set_url = resultArr[i].set_url;
			row.theme_id = resultArr[i].theme_id;
			row.year = resultArr[i].year;
			row.set_img_url = resultArr[i].set_img_url;
			// add the row to the remote table
			v_table.addRow(row);
		}
	}
	catch(ex) {
		v_query.setLastErrorMessage(ex.message); //
		gs.debug(ex.message);
		return;
	}
    // Your code goes here
    // v_table.addRow({...})
  })(v_table, v_query);]]></script>
        <sys_class_name>sys_script_vtable</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-05-20 09:39:43</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_id>034cfd4687a349509f45b8c6cebb354f</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>DefLegosetInfoVers2</sys_name>
        <sys_package display_value="RebrickableLookup" source="x_356576_rebrick2">17eec7e8871f45109f45b8c6cebb35c9</sys_package>
        <sys_policy/>
        <sys_scope display_value="RebrickableLookup">17eec7e8871f45109f45b8c6cebb35c9</sys_scope>
        <sys_update_name>sys_script_vtable_034cfd4687a349509f45b8c6cebb354f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-05-20 12:27:53</sys_updated_on>
        <table>x_356576_rebrick2_st_legoset_info_remote_vers2</table>
    </sys_script_vtable>
</record_update>
